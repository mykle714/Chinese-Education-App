version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: cow-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: cow_db
      POSTGRES_USER: cow_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
    networks:
      - cow-network

  backend:
    build:
      context: .
      dockerfile: server/Dockerfile
      target: production
    container_name: cow-backend-prod
    restart: always
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - CLIENT_URL=${CLIENT_URL}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - ./.env
    ports:
      - "127.0.0.1:5000:5000"  # Only bind to localhost for security
    volumes:
      - ./cedict_ts.u8:/app/cedict_ts.u8:ro
      - ./data/dictionaries:/app/data/dictionaries:ro
    depends_on:
      - postgres
    networks:
      - cow-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cow-frontend-prod
    restart: always
    ports:
      - "0.0.0.0:80:80"      # Standard HTTP port (redirects to HTTPS)
      - "0.0.0.0:443:443"    # Standard HTTPS port
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro  # Mount SSL certificates
    depends_on:
      - backend
    networks:
      - cow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

networks:
  cow-network:
    driver: bridge
